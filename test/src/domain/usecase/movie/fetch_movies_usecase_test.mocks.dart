// Mocks generated by Mockito 5.0.17 from annotations
// in flutter_clean_architecture/test/src/domain/usecase/movie/fetch_movies_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:flutter_clean_architecture/src/data/model/models.dart' as _i2;
import 'package:flutter_clean_architecture/src/domain/repository/movie_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieInfoDataModel_0 extends _i1.Fake
    implements _i2.MovieInfoDataModel {}

class _FakeMovieImageDataModel_1 extends _i1.Fake
    implements _i2.MovieImageDataModel {}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.MovieDataModel>> fetchMovies(String? type) =>
      (super.noSuchMethod(Invocation.method(#fetchMovies, [type]),
          returnValue: Future<List<_i2.MovieDataModel>>.value(
              <_i2.MovieDataModel>[])) as _i4.Future<List<_i2.MovieDataModel>>);
  @override
  _i4.Future<_i2.MovieInfoDataModel> getMovieInfo(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieInfo, [movieId]),
              returnValue: Future<_i2.MovieInfoDataModel>.value(
                  _FakeMovieInfoDataModel_0()))
          as _i4.Future<_i2.MovieInfoDataModel>);
  @override
  _i4.Future<_i2.MovieImageDataModel> getMovieImages(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieImages, [movieId]),
              returnValue: Future<_i2.MovieImageDataModel>.value(
                  _FakeMovieImageDataModel_1()))
          as _i4.Future<_i2.MovieImageDataModel>);
}
